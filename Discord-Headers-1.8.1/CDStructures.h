//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class CKComponent, CKComponentScopeRoot, NSAttributedString, NSCharacterSet, NSDictionary, NSNumber, NSObject<OS_dispatch_semaphore>, NSString, UIColor, UIImage;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVFoundationVideoCapturer {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct set<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> _field3;
    CDUnknownFunctionPointerType *_field4;
    struct signal2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded> _field5;
    struct signal2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local> _field6;
    struct ThreadChecker _field7;
    basic_string_a490aa4c _field8;
    int _field9;
    struct unique_ptr<cricket::VideoFrameFactory, std::__1::default_delete<cricket::VideoFrameFactory>> _field10;
    struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> _field11;
    struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> _field12;
    struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> _field13;
    struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> _field14;
    _Bool _field15;
    int _field16;
    int _field17;
    struct VideoBroadcaster _field18;
    _Bool _field19;
    struct VideoAdapter _field20;
    struct CriticalSection _field21;
    _Bool _field22;
    int _field23;
    int _field24;
    _Bool _field25;
    CDUnknownFunctionPointerType *_field26;
    id _field27;
    struct Thread *_field28;
};

struct AudioSessionObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioTrackInterface;

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGColor;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CKBuildComponentResult {
    id _field1;
    id _field2;
    struct CKComponentBoundsAnimation _field3;
};

struct CKButtonComponentAccessibilityConfiguration {
    id _field1;
};

struct CKComponentAccessibilityTextAttribute {
    CDUnknownBlockType accessibilityLazyTextBlock;
};

struct CKComponentAnimation;

struct CKComponentBoundsAnimation {
    double duration;
    double delay;
    unsigned long long mode;
    unsigned long long options;
    double springDampingRatio;
    double springInitialVelocity;
};

struct CKComponentHostingViewInputs {
    CKComponentScopeRoot *scopeRoot;
    id model;
    id context;
    unordered_multimap_806dc048 stateUpdates;
};

struct CKComponentLayout {
    CKComponent *component;
    struct CGSize size;
    shared_ptr_6a94d7a4 children;
    NSDictionary *extra;
};

struct CKComponentLifecycleManagerState {
    id model;
    id context;
    struct CKSizeRange constrainedSize;
    struct CKComponentLayout layout;
    CKComponentScopeRoot *root;
    id memoizerState;
    struct CKComponentBoundsAnimation boundsAnimation;
};

struct CKComponentMountInfo;

struct CKComponentPreparationInputBatch {
    unsigned long long ID;
    struct Sections sections;
    struct vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *>> items;
    _Bool isContiguousTailInsertion;
};

struct CKComponentScopeFramePair {
    id _field1;
    id _field2;
};

struct CKComponentSize {
    struct CKRelativeDimension width;
    struct CKRelativeDimension height;
    struct CKRelativeDimension minWidth;
    struct CKRelativeDimension minHeight;
    struct CKRelativeDimension maxWidth;
    struct CKRelativeDimension maxHeight;
};

struct CKComponentViewConfiguration {
    struct shared_ptr<const CKComponentViewConfiguration::Repr> rep;
};

struct CKComponentViewContext {
    id _field1;
    struct CGRect _field2;
};

struct CKLabelAttributes {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    long long _field5;
    unsigned long long _field6;
    struct CGSize _field7;
    id _field8;
    double _field9;
    double _field10;
    long long _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
};

struct CKMemoizationKey {
    unsigned long long _field1;
    struct shared_ptr<const void> _field2;
    CDUnknownFunctionPointerType _field3;
};

struct CKNetworkImageComponentOptions {
    id _field1;
    struct CGRect _field2;
};

struct CKPendingComponentAnimation;

struct CKRelativeDimension {
    int _type;
    double _value;
};

struct CKSizeRange {
    struct CGSize min;
    struct CGSize max;
};

struct CKStackLayoutComponentChild;

struct CKStackLayoutComponentStyle {
    unsigned long long direction;
    double spacing;
    unsigned long long justifyContent;
    unsigned long long alignItems;
};

struct CKStateConfiguration {
    NSString *title;
    UIColor *titleColor;
    UIImage *image;
    UIImage *backgroundImage;
};

struct CKStatefulViewComponentAccessibility {
    id _field1;
    id _field2;
};

struct CKStaticLayoutComponentChild;

struct CKTextComponentAccessibilityContext {
    NSNumber *isAccessibilityElement;
    NSNumber *providesAccessibleElements;
    struct CKComponentAccessibilityTextAttribute accessibilityLabel;
};

struct CKTextComponentOptions {
    unsigned long long _field1;
    struct CKTextComponentAccessibilityContext _field2;
};

struct CKTextKitAttributes {
    NSAttributedString *attributedString;
    NSAttributedString *truncationAttributedString;
    NSCharacterSet *avoidTailTruncationSet;
    long long lineBreakMode;
    unsigned long long maximumNumberOfLines;
    struct CGSize shadowOffset;
    UIColor *shadowColor;
    double shadowOpacity;
    double shadowRadius;
    CDUnknownFunctionPointerType layoutManagerFactory;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct Change;

struct Constraint;

struct Constraints {
    struct Constraint *_field1;
    struct Constraint *_field2;
    struct __compressed_pair<webrtc::MediaConstraintsInterface::Constraint *, std::__1::allocator<webrtc::MediaConstraintsInterface::Constraint>> {
        struct Constraint *_field1;
    } _field3;
};

struct CopyOnWriteBuffer {
    struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char>>> _field1;
};

struct CriticalSection {
    int lock_queue_;
    int recursion_;
    NSObject<OS_dispatch_semaphore> *semaphore_;
    struct _opaque_pthread_t *owning_thread_;
};

struct CriticalSectionWrapper;

struct DataBuffer {
    struct CopyOnWriteBuffer _field1;
    _Bool _field2;
};

struct DataChannelDelegateAdapter;

struct DataChannelInit {
    _Bool reliable;
    _Bool ordered;
    int maxRetransmitTime;
    int maxRetransmits;
    basic_string_a490aa4c protocol;
    _Bool negotiated;
    int id;
};

struct DataChannelInterface;

struct DeviceDescription;

struct Discord {
    struct shared_ptr<discord::uv::ThreadedEventLoop> _field1;
    struct unique_ptr<discord::internal::ProcessObserver, std::__1::default_delete<discord::internal::ProcessObserver>> _field2;
    int _field3;
};

struct FileRotatingLogSink;

struct IceCandidateInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct IceServer {
    basic_string_a490aa4c _field1;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field2;
    basic_string_a490aa4c _field3;
    basic_string_a490aa4c _field4;
};

struct IdBase;

struct KSJSONDecodeCallbacks {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
};

struct MediaConfig {
    _Bool _field1;
    struct Video _field2;
};

struct MediaConstraints;

struct MediaStreamInterface;

struct MediaStreamTrackInterface;

struct ModuleData;

struct MountContext {
    struct shared_ptr<CK::Component::ViewManager> _field1;
    struct CGPoint _field2;
    struct UIEdgeInsets _field3;
    _Bool _field4;
};

struct MountResult {
    _Bool _field1;
    struct MountContext _field2;
};

struct Mutex {
    struct _opaque_pthread_mutex_t _m;
};

struct NSDictionary {
    Class _field1;
};

struct NSURL {
    Class _field1;
    id _field2;
    id _field3;
    void *_field4;
    void *_field5;
};

struct Optional<bool> {
    _Bool _field1;
    union {
        _Bool _field1;
    } _field2;
};

struct Optional<cricket::VideoFormat> {
    _Bool _field1;
    union {
        struct VideoFormat _field1;
    } _field2;
};

struct Optional<int> {
    _Bool _field1;
    union {
        int _field1;
    } _field2;
};

struct POPAnimatorItem;

struct PeerConnectionDelegateAdapter;

struct PeerConnectionFactoryInterface;

struct PeerConnectionInterface;

struct ProcessObserver;

struct RCTJSCWrapper {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    CDUnknownFunctionPointerType _field14;
    CDUnknownFunctionPointerType _field15;
    CDUnknownFunctionPointerType _field16;
    CDUnknownFunctionPointerType _field17;
    Class _field18;
    Class _field19;
    CDUnknownFunctionPointerType _field20;
};

struct RCTJSContextData {
    _Bool _field1;
    id _field2;
    id _field3;
    struct RCTJSCWrapper *_field4;
};

struct RTCConfiguration {
    int _field1;
    struct vector<webrtc::PeerConnectionInterface::IceServer, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    _Bool _field7;
    int _field8;
    int _field9;
    int _field10;
    struct vector<rtc::scoped_refptr<rtc::RTCCertificate>, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> _field11;
    _Bool _field12;
    struct MediaConfig _field13;
    _Bool _field14;
    _Bool _field15;
    struct Optional<int> _field16;
    struct Optional<bool> _field17;
    struct Optional<bool> _field18;
    int _field19;
};

struct RandomAccessBundleData {
    struct unique_ptr<__sFILE, int (*)(__sFILE *)> bundle;
    unsigned long long baseOffset;
    unsigned long long numTableEntries;
    struct unique_ptr<ModuleData [], std::__1::default_delete<ModuleData []>> table;
};

struct RefCountedObject<rtc::BufferT<unsigned char>>;

struct Repr;

struct RtpCodecParameters {
    int _field1;
    basic_string_a490aa4c _field2;
    int _field3;
    int _field4;
};

struct RtpEncodingParameters {
    _Bool _field1;
    int _field2;
};

struct RtpParameters {
    struct vector<webrtc::RtpEncodingParameters, std::__1::allocator<webrtc::RtpEncodingParameters>> _field1;
    struct vector<webrtc::RtpCodecParameters, std::__1::allocator<webrtc::RtpCodecParameters>> _field2;
};

struct RtpReceiverInterface;

struct RtpSenderInterface;

struct SSState<POP::Vector4<double>> {
    struct Vector4<double> _field1;
    struct Vector4<double> _field2;
};

struct Sections {
    struct set<long, std::__1::less<long>, std::__1::allocator<long>> _insertions;
    struct set<long, std::__1::less<long>, std::__1::allocator<long>> _removals;
    struct set<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long>>, std::__1::allocator<std::__1::pair<long, long>>> _moves;
};

struct SessionDescriptionInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct SinkPair;

struct SpringSolver<POP::Vector4<double>> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct SSState<POP::Vector4<double>> _field8;
    struct Vector4<double> _field9;
    _Bool _field10;
};

struct StatsReport {
    struct scoped_refptr<webrtc::StatsReport::IdBase> _field1;
    double _field2;
    struct map<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>, std::__1::less<webrtc::StatsReport::StatsValueName>, std::__1::allocator<std::__1::pair<const webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>>> _field3;
};

struct Thread;

struct ThreadChecker;

struct ThreadedEventLoop;

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct Vector4<double> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct Video {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct VideoAdapter {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    long long _field9;
    struct Optional<cricket::VideoFormat> _field10;
    int _field11;
    int _field12;
    struct CriticalSection _field13;
};

struct VideoBroadcaster {
    CDUnknownFunctionPointerType *_field1;
    struct ThreadChecker _field2;
    struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> _field3;
    CDUnknownFunctionPointerType *_field4;
    struct ThreadChecker _field5;
    struct CriticalSection _field6;
    struct VideoSinkWants _field7;
    struct unique_ptr<cricket::WebRtcVideoFrame, std::__1::default_delete<cricket::WebRtcVideoFrame>> _field8;
};

struct VideoCaptureCapability {
    int width;
    int height;
    int maxFPS;
    int expectedCaptureDelay;
    int rawType;
    int codecType;
    _Bool interlaced;
};

struct VideoCaptureDataCallback;

struct VideoCaptureFeedBack;

struct VideoCaptureIos {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    int _field3;
    char *_field4;
    struct CriticalSectionWrapper *_field5;
    int _field6;
    struct VideoCaptureCapability _field7;
    struct CriticalSectionWrapper *_field8;
    long long _field9;
    long long _field10;
    _Bool _field11;
    _Bool _field12;
    int _field13;
    int _field14;
    struct VideoCaptureDataCallback *_field15;
    struct VideoCaptureFeedBack *_field16;
    long long _field17;
    long long _field18[90];
    int _field19;
    struct VideoFrame {
        scoped_refptr_30488dd1 _field1;
        unsigned int _field2;
        long long _field3;
        long long _field4;
        int _field5;
    } _field20;
    _Bool _field21;
    id _field22;
    _Bool _field23;
    int _field24;
    struct VideoCaptureCapability _field25;
};

struct VideoFormat {
    int _field1;
    int _field2;
    long long _field3;
    unsigned int _field4;
};

struct VideoFrameBuffer;

struct VideoFrameFactory;

struct VideoRendererAdapter;

struct VideoSinkInterface<cricket::VideoFrame> {
    CDUnknownFunctionPointerType *_field1;
};

struct VideoSinkWants {
    _Bool _field1;
    _Bool _field2;
    struct Optional<int> _field3;
    struct Optional<int> _field4;
};

struct VideoTrackInterface;

struct VideoTrackSourceInterface;

struct ViewManager;

struct ViewReusePoolMap {
    struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool>>> map;
    struct vector<UIView *, std::__1::allocator<UIView *>> vendedViews;
};

struct WebRtcVideoFrame;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct _POPAnimationState {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    int _field3;
    id _field4;
    unsigned long long _field5;
    double _field6;
    double _field7;
    double _field8;
    id _field9;
    CDUnknownBlockType _field10;
    CDUnknownBlockType _field11;
    CDUnknownBlockType _field12;
    CDUnknownBlockType _field13;
    id _field14;
    id _field15;
    double _field16;
    long long _field17;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct __hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>;

struct __hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>;

struct __hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>;

struct __hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>;

struct __hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>;

struct __hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>;

struct __hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>;

struct __hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>;

struct __hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>;

struct __hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>;

struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, void *> {
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, void *> *_field1;
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, void *> *_field2;
};

struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, void *> {
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, void *> *_field1;
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, void *> *_field2;
};

struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> *__prev_;
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> *__next_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct array<CKStateConfiguration, 8> {
    struct CKStateConfiguration __elems_[8];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct deque<unsigned long long, std::__1::allocator<unsigned long long>> {
    struct __split_buffer<unsigned long long *, std::__1::allocator<unsigned long long *>> {
        unsigned long long **__first_;
        unsigned long long **__begin_;
        unsigned long long **__end_;
        struct __compressed_pair<unsigned long long **, std::__1::allocator<unsigned long long *>> {
            unsigned long long **__first_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long long>> {
        unsigned long long __first_;
    } __size_;
};

struct list<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, std::__1::allocator<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*>> {
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, std::__1::allocator<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*>> {
    struct __list_node_base<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
};

struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> {
    struct __tree<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> {
        struct __tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long, std::__1::__value_type<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>, std::__1::less<long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>, std::__1::less<webrtc::StatsReport::StatsValueName>, std::__1::allocator<std::__1::pair<const webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>>> {
    struct __tree<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>, std::__1::__map_value_compare<webrtc::StatsReport::StatsValueName, std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>, std::__1::less<webrtc::StatsReport::StatsValueName>, true>, std::__1::allocator<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>>> {
        struct __tree_node<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<webrtc::StatsReport::StatsValueName, std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::linked_ptr<webrtc::StatsReport::Value>>, std::__1::less<webrtc::StatsReport::StatsValueName>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t __m_;
};

struct pair<id<NSObject>, NSIndexPath *> {
    id _field1;
    id _field2;
};

struct queue<unsigned long long, std::__1::deque<unsigned long long, std::__1::allocator<unsigned long long>>> {
    struct deque<unsigned long long, std::__1::allocator<unsigned long long>> c;
};

struct scoped_refptr<rtc::RTCCertificate>;

struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char>>> {
    struct RefCountedObject<rtc::BufferT<unsigned char>> *_field1;
};

struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
};

struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
};

struct scoped_refptr<webrtc::StatsReport::IdBase> {
    struct IdBase *_field1;
};

struct scoped_refptr<webrtc::VideoFrameBuffer> {
    struct VideoFrameBuffer *ptr_;
};

struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
};

struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
};

struct set<long, std::__1::less<long>, std::__1::allocator<long>> {
    struct __tree<long, std::__1::less<long>, std::__1::allocator<long>> {
        struct __tree_node<long, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<long>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> {
    struct __tree<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> {
        struct __tree_node<sigslot::_signal_base_interface *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<sigslot::_signal_base_interface *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<sigslot::_signal_base_interface *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long>>, std::__1::allocator<std::__1::pair<long, long>>> {
    struct __tree<std::__1::pair<long, long>, std::__1::less<std::__1::pair<long, long>>, std::__1::allocator<std::__1::pair<long, long>>> {
        struct __tree_node<std::__1::pair<long, long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<long, long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::pair<long, long>>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<CK::Component::ViewManager> {
    struct ViewManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const CKComponentViewConfiguration::Repr> {
    struct Repr *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::__1::unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue>>>> {
    unordered_map_6bb69700 *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>>> {
    struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const std::__1::vector<__weak id, std::__1::allocator<__weak id>>> {
    struct vector<__weak id, std::__1::allocator<__weak id>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const void> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<discord::uv::ThreadedEventLoop> {
    struct ThreadedEventLoop *_field1;
    struct __shared_weak_count *_field2;
};

struct signal2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local> {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct _opaque_pthread_mutex_t _field3;
    struct list<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*, std::__1::allocator<sigslot::_connection_base2<cricket::VideoCapturer *, const cricket::CapturedFrame *, sigslot::multi_threaded_local>*>> _field4;
};

struct signal2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded> {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct list<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*, std::__1::allocator<sigslot::_connection_base2<cricket::VideoCapturer *, cricket::CaptureState, sigslot::single_threaded>*>> _field3;
};

struct unique_ptr<CKComponentMountInfo, std::__1::default_delete<CKComponentMountInfo>> {
    struct __compressed_pair<CKComponentMountInfo *, std::__1::default_delete<CKComponentMountInfo>> {
        struct CKComponentMountInfo *__first_;
    } __ptr_;
};

struct unique_ptr<ModuleData [], std::__1::default_delete<ModuleData []>> {
    struct __compressed_pair<ModuleData *, std::__1::default_delete<ModuleData []>> {
        struct ModuleData *__first_;
    } __ptr_;
};

struct unique_ptr<__sFILE, int (*)(__sFILE *)> {
    struct __compressed_pair<__sFILE *, int (*)(__sFILE *)> {
        struct __sFILE *__first_;
        CDUnknownFunctionPointerType __second_;
    } __ptr_;
};

struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> {
    struct __compressed_pair<cricket::VideoFormat *, std::__1::default_delete<cricket::VideoFormat>> {
        struct VideoFormat *_field1;
    } _field1;
};

struct unique_ptr<cricket::VideoFrame, std::__1::default_delete<cricket::VideoFrame>> {
    struct __compressed_pair<cricket::VideoFrame *, std::__1::default_delete<cricket::VideoFrame>> {
        struct VideoFrame *__first_;
    } __ptr_;
};

struct unique_ptr<cricket::VideoFrameFactory, std::__1::default_delete<cricket::VideoFrameFactory>> {
    struct __compressed_pair<cricket::VideoFrameFactory *, std::__1::default_delete<cricket::VideoFrameFactory>> {
        struct VideoFrameFactory *_field1;
    } _field1;
};

struct unique_ptr<cricket::WebRtcVideoFrame, std::__1::default_delete<cricket::WebRtcVideoFrame>> {
    struct __compressed_pair<cricket::WebRtcVideoFrame *, std::__1::default_delete<cricket::WebRtcVideoFrame>> {
        struct WebRtcVideoFrame *_field1;
    } _field1;
};

struct unique_ptr<discord::internal::ProcessObserver, std::__1::default_delete<discord::internal::ProcessObserver>> {
    struct __compressed_pair<discord::internal::ProcessObserver *, std::__1::default_delete<discord::internal::ProcessObserver>> {
        struct ProcessObserver *_field1;
    } _field1;
};

struct unique_ptr<rtc::FileRotatingLogSink, std::__1::default_delete<rtc::FileRotatingLogSink>> {
    struct __compressed_pair<rtc::FileRotatingLogSink *, std::__1::default_delete<rtc::FileRotatingLogSink>> {
        struct FileRotatingLogSink *__first_;
    } __ptr_;
};

struct unique_ptr<rtc::Thread, std::__1::default_delete<rtc::Thread>> {
    struct __compressed_pair<rtc::Thread *, std::__1::default_delete<rtc::Thread>> {
        struct Thread *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>>> {
        struct __hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<unsigned char [], std::__1::default_delete<unsigned char []>> {
    struct __compressed_pair<unsigned char *, std::__1::default_delete<unsigned char []>> {
        char *__first_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataBuffer, std::__1::default_delete<webrtc::DataBuffer>> {
    struct __compressed_pair<webrtc::DataBuffer *, std::__1::default_delete<webrtc::DataBuffer>> {
        struct DataBuffer *__first_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataChannelDelegateAdapter, std::__1::default_delete<webrtc::DataChannelDelegateAdapter>> {
    struct __compressed_pair<webrtc::DataChannelDelegateAdapter *, std::__1::default_delete<webrtc::DataChannelDelegateAdapter>> {
        struct DataChannelDelegateAdapter *__first_;
    } __ptr_;
};

struct unique_ptr<webrtc::IceCandidateInterface, std::__1::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::__1::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
};

struct unique_ptr<webrtc::MediaConstraints, std::__1::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::__1::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *_field1;
    } _field1;
};

struct unique_ptr<webrtc::PeerConnectionDelegateAdapter, std::__1::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
    struct __compressed_pair<webrtc::PeerConnectionDelegateAdapter *, std::__1::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
        struct PeerConnectionDelegateAdapter *__first_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoRendererAdapter, std::__1::default_delete<webrtc::VideoRendererAdapter>> {
    struct __compressed_pair<webrtc::VideoRendererAdapter *, std::__1::default_delete<webrtc::VideoRendererAdapter>> {
        struct VideoRendererAdapter *__first_;
    } __ptr_;
};

struct unordered_map<CK::Component::ViewKey, CK::Component::ViewReusePool, std::__1::hash<CK::Component::ViewKey>, std::__1::equal_to<CK::Component::ViewKey>, std::__1::allocator<std::__1::pair<const CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
    struct __hash_table<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::hash<CK::Component::ViewKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CK::Component::ViewKey, std::__1::__hash_value_type<CK::Component::ViewKey, CK::Component::ViewReusePool>, std::__1::equal_to<CK::Component::ViewKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue>>> {
    struct __hash_table<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true>, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<CKLayoutMemoizationKey, CKComponentLayout, CKLayoutMemoizationKey::Hash, CKLayoutMemoizationKey::Equals, std::__1::allocator<std::__1::pair<const CKLayoutMemoizationKey, CKComponentLayout>>> {
    struct __hash_table<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>, std::__1::allocator<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Hash, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CKLayoutMemoizationKey, std::__1::__hash_value_type<CKLayoutMemoizationKey, CKComponentLayout>, CKLayoutMemoizationKey::Equals, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<_CKStateScopeKey, CKComponentScopeFrame *, std::__1::hash<_CKStateScopeKey>, std::__1::equal_to<_CKStateScopeKey>, std::__1::allocator<std::__1::pair<const _CKStateScopeKey, CKComponentScopeFrame *>>> {
    struct __hash_table<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::hash<_CKStateScopeKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<_CKStateScopeKey, std::__1::__hash_value_type<_CKStateScopeKey, CKComponentScopeFrame *>, std::__1::equal_to<_CKStateScopeKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem, PoolKeyHasher, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id>>, std::__1::allocator<std::__1::pair<const std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, PoolKeyHasher, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<__unsafe_unretained Class, id>, std::__1::__hash_value_type<std::__1::pair<__unsafe_unretained Class, id>, FBStatefulReusePoolItem>, std::__1::equal_to<std::__1::pair<__unsafe_unretained Class, id>>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, CKAppliedComponentAnimation, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CKAppliedComponentAnimation>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::hash<unsigned long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, CKAppliedComponentAnimation>, std::__1::equal_to<unsigned long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, NSString *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSString *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, NSString *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, UIColor *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIColor *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, UIColor *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long, UIImage *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIImage *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, UIImage *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multimap<CKComponentAnnouncedEvent, CKComponentController *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const CKComponentAnnouncedEvent, CKComponentController *>>> {
    struct __hash_table<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CKComponentAnnouncedEvent, std::__1::__hash_value_type<CKComponentAnnouncedEvent, CKComponentController *>, std::__1::equal_to<unsigned long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<CKMemoizationKey, CKComponent *, std::__1::hash<CKMemoizationKey>, std::__1::equal_to<CKMemoizationKey>, std::__1::allocator<std::__1::pair<const CKMemoizationKey, CKComponent *>>> {
    struct __hash_table<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>, std::__1::allocator<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::hash<CKMemoizationKey>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CKMemoizationKey, std::__1::__hash_value_type<CKMemoizationKey, CKComponent *>, std::__1::equal_to<CKMemoizationKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, id (^)(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id (^)(id)>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<CK::ArrayController::Output::Change, std::__1::allocator<CK::ArrayController::Output::Change>> {
    struct Change *_field1;
    struct Change *_field2;
    struct __compressed_pair<CK::ArrayController::Output::Change *, std::__1::allocator<CK::ArrayController::Output::Change>> {
        struct Change *_field1;
    } _field3;
};

struct vector<CKComponentAnimation, std::__1::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::__1::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
};

struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>>;

struct vector<CKComponentPreparationInputItem *, std::__1::allocator<CKComponentPreparationInputItem *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<CKComponentPreparationInputItem *__strong *, std::__1::allocator<CKComponentPreparationInputItem *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<CKPendingComponentAnimation, std::__1::allocator<CKPendingComponentAnimation>> {
    struct CKPendingComponentAnimation *__begin_;
    struct CKPendingComponentAnimation *__end_;
    struct __compressed_pair<CKPendingComponentAnimation *, std::__1::allocator<CKPendingComponentAnimation>> {
        struct CKPendingComponentAnimation *__first_;
    } __end_cap_;
};

struct vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild>> {
    struct CKStackLayoutComponentChild *__begin_;
    struct CKStackLayoutComponentChild *__end_;
    struct __compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild>> {
        struct CKStackLayoutComponentChild *__first_;
    } __end_cap_;
};

struct vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild>> {
    struct CKStaticLayoutComponentChild *__begin_;
    struct CKStaticLayoutComponentChild *__end_;
    struct __compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild>> {
        struct CKStaticLayoutComponentChild *__first_;
    } __end_cap_;
};

struct vector<Discord::DeviceDescription, std::__1::allocator<Discord::DeviceDescription>> {
    struct DeviceDescription *_field1;
    struct DeviceDescription *_field2;
    struct __compressed_pair<Discord::DeviceDescription *, std::__1::allocator<Discord::DeviceDescription>> {
        struct DeviceDescription *_field1;
    } _field3;
};

struct vector<SEL *, std::__1::allocator<SEL *>> {
    SEL *__begin_;
    SEL *__end_;
    struct __compressed_pair<SEL **, std::__1::allocator<SEL *>> {
        SEL *__first_;
    } __end_cap_;
};

struct vector<UIView *, std::__1::allocator<UIView *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<UIView *__strong *, std::__1::allocator<UIView *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__first_;
    } __end_cap_;
};

struct vector<__weak id, std::__1::allocator<__weak id>>;

struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__first_;
    } __end_cap_;
};

struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> {
    struct VideoFormat *_field1;
    struct VideoFormat *_field2;
    struct __compressed_pair<cricket::VideoFormat *, std::__1::allocator<cricket::VideoFormat>> {
        struct VideoFormat *_field1;
    } _field3;
};

struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
    struct SinkPair *_field1;
    struct SinkPair *_field2;
    struct __compressed_pair<rtc::VideoSourceBase::SinkPair *, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
        struct SinkPair *_field1;
    } _field3;
};

struct vector<rtc::scoped_refptr<rtc::RTCCertificate>, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> {
    struct scoped_refptr<rtc::RTCCertificate> *_field1;
    struct scoped_refptr<rtc::RTCCertificate> *_field2;
    struct __compressed_pair<rtc::scoped_refptr<rtc::RTCCertificate>*, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> {
        struct scoped_refptr<rtc::RTCCertificate> *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_a490aa4c *_field1;
    basic_string_a490aa4c *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_a490aa4c *_field1;
    } _field3;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__first_;
    } __end_cap_;
};

struct vector<webrtc::PeerConnectionInterface::IceServer, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> {
    struct IceServer *_field1;
    struct IceServer *_field2;
    struct __compressed_pair<webrtc::PeerConnectionInterface::IceServer *, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> {
        struct IceServer *_field1;
    } _field3;
};

struct vector<webrtc::RtpCodecParameters, std::__1::allocator<webrtc::RtpCodecParameters>> {
    struct RtpCodecParameters *_field1;
    struct RtpCodecParameters *_field2;
    struct __compressed_pair<webrtc::RtpCodecParameters *, std::__1::allocator<webrtc::RtpCodecParameters>> {
        struct RtpCodecParameters *_field1;
    } _field3;
};

struct vector<webrtc::RtpEncodingParameters, std::__1::allocator<webrtc::RtpEncodingParameters>> {
    struct RtpEncodingParameters *_field1;
    struct RtpEncodingParameters *_field2;
    struct __compressed_pair<webrtc::RtpEncodingParameters *, std::__1::allocator<webrtc::RtpEncodingParameters>> {
        struct RtpEncodingParameters *_field1;
    } _field3;
};

#if 0
// Names with conflicting types:
typedef struct {
    struct Sections _field1;
    struct Items {
        struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> _field1;
        struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> _field2;
        struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> _field3;
        struct map<long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, std::__1::map<long, id<NSObject>, std::__1::less<long>, std::__1::allocator<std::__1::pair<const long, id<NSObject>>>>>>> _field4;
    } _field2;
} Changeset_21dc6a45;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    unsigned char _field2;
    _Bool _field3;
    unsigned long long _field4;
} CDStruct_6a6a01a4;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    long long _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
} CDStruct_e097db04;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
} CDStruct_2ec95fd7;

typedef struct {
    struct CGColor *_field1;
    struct CGColor *_field2;
    struct CGColor *_field3;
    struct CGColor *_field4;
} CDStruct_a5ac02f4;

typedef struct {
    struct CLLocationCoordinate2D _field1;
    CDStruct_c3b9c2ee _field2;
} CDStruct_2b0c6e0b;

// Template types
typedef struct SpringSolver<POP::Vector4<double>> {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct SSState<POP::Vector4<double>> _field8;
    struct Vector4<double> _field9;
    _Bool _field10;
} SpringSolver_fe820e75;

typedef struct VideoSinkInterface<cricket::VideoFrame> {
    CDUnknownFunctionPointerType *_field1;
} VideoSinkInterface_f63caa8b;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
} basic_string_a490aa4c;

typedef struct list<std::__1::shared_ptr<POPAnimatorItem>, std::__1::allocator<std::__1::shared_ptr<POPAnimatorItem>>> {
    struct __list_node_base<std::__1::shared_ptr<POPAnimatorItem>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<POPAnimatorItem>, void *>>> {
        unsigned long long __first_;
    } __size_alloc_;
} list_670f5810;

typedef struct pair<id<NSObject>, NSIndexPath *> {
    id _field1;
    id _field2;
} pair_2db5cf6c;

typedef struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
} scoped_refptr_833c0867;

typedef struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
} scoped_refptr_09a33b10;

typedef struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
} scoped_refptr_6217ee82;

typedef struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
} scoped_refptr_7d7e84a9;

typedef struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
} scoped_refptr_1eaeeec2;

typedef struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
} scoped_refptr_1f0d680a;

typedef struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
} scoped_refptr_92bf499b;

typedef struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
} scoped_refptr_3635276f;

typedef struct scoped_refptr<webrtc::VideoFrameBuffer> {
    struct VideoFrameBuffer *ptr_;
} scoped_refptr_30488dd1;

typedef struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
} scoped_refptr_cae59c25;

typedef struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
} scoped_refptr_a41c3e90;

typedef struct shared_ptr<POPAnimatorItem> {
    struct POPAnimatorItem *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_1553c9f8;

typedef struct shared_ptr<const std::__1::vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>>> {
    struct vector<CKComponentLayoutChild, std::__1::allocator<CKComponentLayoutChild>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_6a94d7a4;

typedef struct unique_ptr<webrtc::IceCandidateInterface, std::__1::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::__1::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
} unique_ptr_eddc2ff2;

typedef struct unique_ptr<webrtc::MediaConstraints, std::__1::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::__1::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *_field1;
    } _field1;
} unique_ptr_ba2c75b1;

typedef struct unordered_map<CKComponentViewAttribute, CKBoxedValue, std::__1::hash<CKComponentViewAttribute>, std::__1::equal_to<CKComponentViewAttribute>, std::__1::allocator<std::__1::pair<const CKComponentViewAttribute, CKBoxedValue>>> {
    struct __hash_table<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true>, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true>, std::__1::allocator<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::hash<CKComponentViewAttribute>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CKComponentViewAttribute, std::__1::__hash_value_type<CKComponentViewAttribute, CKBoxedValue>, std::__1::equal_to<CKComponentViewAttribute>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_6bb69700;

typedef struct unordered_map<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>>>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_map_fc8abdf3;

typedef struct unordered_map<unsigned long, NSString *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, NSString *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, NSString *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, NSString *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, NSString *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_4af95a89;

typedef struct unordered_map<unsigned long, UIColor *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIColor *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, UIColor *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, UIColor *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIColor *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_30601d37;

typedef struct unordered_map<unsigned long, UIImage *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, UIImage *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, UIImage *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<unsigned long, UIImage *>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::hash<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, UIImage *>, std::__1::equal_to<unsigned long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_ecc7abe5;

typedef struct unordered_multimap<int, id (^)(id), std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, id (^)(id)>>> {
    struct __hash_table<std::__1::__hash_value_type<int, id (^)(id)>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, id (^)(id)>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *>*> {
                struct __hash_node<std::__1::__hash_value_type<int, id (^)(id)>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::hash<int>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, id (^)(id)>, std::__1::equal_to<int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_multimap_806dc048;

typedef struct vector<CKComponentAnimation, std::__1::allocator<CKComponentAnimation>> {
    struct CKComponentAnimation *_field1;
    struct CKComponentAnimation *_field2;
    struct __compressed_pair<CKComponentAnimation *, std::__1::allocator<CKComponentAnimation>> {
        struct CKComponentAnimation *_field1;
    } _field3;
} vector_035bbd4a;

typedef struct vector<CKStackLayoutComponentChild, std::__1::allocator<CKStackLayoutComponentChild>> {
    struct CKStackLayoutComponentChild *__begin_;
    struct CKStackLayoutComponentChild *__end_;
    struct __compressed_pair<CKStackLayoutComponentChild *, std::__1::allocator<CKStackLayoutComponentChild>> {
        struct CKStackLayoutComponentChild *__first_;
    } __end_cap_;
} vector_89ce9f02;

typedef struct vector<CKStaticLayoutComponentChild, std::__1::allocator<CKStaticLayoutComponentChild>> {
    struct CKStaticLayoutComponentChild *__begin_;
    struct CKStaticLayoutComponentChild *__end_;
    struct __compressed_pair<CKStaticLayoutComponentChild *, std::__1::allocator<CKStaticLayoutComponentChild>> {
        struct CKStaticLayoutComponentChild *__first_;
    } __end_cap_;
} vector_286522d3;

typedef struct vector<Discord::DeviceDescription, std::__1::allocator<Discord::DeviceDescription>> {
    struct DeviceDescription *_field1;
    struct DeviceDescription *_field2;
    struct __compressed_pair<Discord::DeviceDescription *, std::__1::allocator<Discord::DeviceDescription>> {
        struct DeviceDescription *_field1;
    } _field3;
} vector_868a1150;

typedef struct vector<SEL *, std::__1::allocator<SEL *>> {
    SEL *__begin_;
    SEL *__end_;
    struct __compressed_pair<SEL **, std::__1::allocator<SEL *>> {
        SEL *__first_;
    } __end_cap_;
} vector_a6ab289d;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__first_;
    } __end_cap_;
} vector_d5f79a51;

typedef struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__first_;
    } __end_cap_;
} vector_ac2cc512;

